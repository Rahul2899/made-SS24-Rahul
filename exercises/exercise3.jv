pipeline TransportPipeline{

    TransportDataExtractor
    -> DataInterpreter
    -> CSVDataInterpreter
    -> ScrapeMetaData
    -> AssignNameToColumnSet1
    -> AssignNameToColumnSet2
    -> DataStructure
    -> SaveToDB;

    block TransportDataExtractor oftype HttpExtractor{
        url:"https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    block DataInterpreter oftype TextFileInterpreter{
        encoding:"latin4";
    }

    block CSVDataInterpreter oftype CSVInterpreter{
        delimiter:";";
        enclosingEscape:'"';
    }

    block ScrapeMetaData oftype RowDeleter{
        delete:[row 1,row 2,row 3,row 4,row 5,row 6,row 7, row 41337, row 41338, row 41339];
    }

    // To set Headers
    block AssignNameToColumnSet1 oftype CellWriter{
        at:range A1:E1;
        write:['year','month','goods_id','goods_name','goods_source'];
    }
    // Same to set Headers
    block AssignNameToColumnSet2 oftype CellWriter{
        at:range AT1:AU1;
        write:['abroad','total'];
    }
    
    block DataStructure oftype TableInterpreter{
        header:true;
        columns:
        [
            "year" oftype positive,
            "month" oftype GermanMonth,
            "goods_id" oftype GoodIds,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype positive,
            "total" oftype positive
        ];
    }

    block SaveToDB oftype SQLiteLoader{
        table:"goods";
        file:"./goodsTransportedByTrain.sqlite";
    }
}

// constraint 1. Numeric values +ve
valuetype positive oftype integer{
    constraints:[PositiveValues];
}

constraint PositiveValues on integer: value >=0;

// Constraint 2. Capitalize months and German months only
valuetype GermanMonth oftype text{
    constraints:[CapitaliseGermanMonth];
}
constraint CapitaliseGermanMonth oftype RegexConstraint{
    regex:/\b(Januar|Februar|MÃ¤rz|April|Mai|Juni|Juli|August|September|Oktber|November|Dezember)\b/;
}

// Constraint 3. Good_Id start with pattern NST7...
valuetype GoodIds oftype text{
    constraints:[StartWithCode];
}

constraint StartWithCode oftype RegexConstraint{
    regex: /^["NST7\-"][0-9A-Z]{3}/;
}
