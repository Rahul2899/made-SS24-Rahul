// Define a data processing pipeline named 'Tree'
pipeline Tree {
    
    // Sequence of operations in the pipeline
    DataExtractor -> CsvFilePicker -> AirportsTextFileInterpreter -> AirportsCSVInterpreter
    -> WriteHeader -> WrriteHeaderBat -> AirportsTableInterpreter 
    -> CelsiusToFahrenheitTransformerTemp -> CelsiusToFahrenheitTransformerBat -> DatabaseLoader;

    // Data extraction block
    block DataExtractor oftype GTFSExtractor { 
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip"; 
    }

    // File picking block
    block CsvFilePicker oftype FilePicker { 
        path: "/data.csv"; 
    }

    // Text file interpretation block
    block AirportsTextFileInterpreter oftype TextFileInterpreter {}

    // CSV interpretation block
    block AirportsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";"; 
    }

    // Header writing blocks
    block WriteHeader oftype CellWriter { 
        at: range A1:E1; 
        write: ["id", "producer", "model", "month", "temperature"]; 
    }

    block WrriteHeaderBat oftype CellWriter { 
        at: cell J1; 
        write: ["battery_temperature"]; 
    }

    // Table interpretation block
    block AirportsTableInterpreter oftype TableInterpreter { 
        header: true; 
        columns: [
            "id" oftype integer,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ]; 
    }

    // Temperature transformation blocks
    block CelsiusToFahrenheitTransformerTemp oftype TableTransformer { 
        inputColumns: ['temperature',]; 
        outputColumn: 'temperature'; 
        use: CelsiusToFahrenheit; 
    }

    block CelsiusToFahrenheitTransformerBat oftype TableTransformer { 
        inputColumns: ['battery_temperature',]; 
        outputColumn: 'battery_temperature'; 
        use: CelsiusToFahrenheit; 
    }

    // Database loading block
    block DatabaseLoader oftype SQLiteLoader { 
        table: "temperatures"; 
        file: "./temperatures.sqlite"; 
    }

    // Transformation definitions
    transform CelsiusToFahrenheit { 
        from Celsius oftype decimal; 
        to Fahrenheit oftype decimal; 
        Fahrenheit: (Celsius * 9/5) + 32; 
    }

    // Value type and constraint definitions
    valuetype IdConstraint oftype text { 
        constraints: [ IdCon, ]; 
    }

    
    valuetype IdConstraint oftype text {
        constraints: [ GeoConstraint, ]; 
    }

    constraint GeoConstraint on text: 
        value matches /\d{1,3}\.\d{1,}\, \d{1,3}\.\d{1,}/;

    transform Coordinate { 
        from Old oftype text; 
        to New oftype decimal; 
        New: Old/100; 
    }

  
}
