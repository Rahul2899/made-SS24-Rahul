
pipeline Tree {

    // 1. Data Extraction
    block DataExtractor oftype GTFSExtractor { 
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip"; 
    }
    
    // 2. File Handling
    block CsvFilePicker oftype FilePicker {
        path: "/data.csv";
    }
    block AirportsTextFileInterpreter oftype TextFileInterpreter {}
    block AirportsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";"; 
    }

    // 3. Writing Headers
    block WriteHeader oftype CellWriter {
        at: range A1:E1; 
        write: ["id", "producer", "model", "month", "temperature"];
    }
    block WriteHeaderBat oftype CellWriter {
        at: cell J1; 
        write: ["battery_temperature"];
    }

    // 4. Table Interpretation
    block AirportsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype integer,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // 5. Transformations
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
    block CelsiusToFahrenheitTransformerTemp oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }
    block CelsiusToFahrenheitTransformerBat oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // 6. Database Loading
    block DatabaseLoader oftype SQLiteLoader { 
        table: "temperatures"; 
        file: "./temperatures.sqlite"; 
    }

    // 7. Constraints
    valuetype IdConstraint oftype text {
        constraints: [
            IdCon,
        ];
    }
    constraint IdCon on text:
        value matches /NST7-([0-9A-Z])/;

    /*
    valuetype IdConstraint oftype text {
        constraints: [
            GeoConstraint,
        ];
    }
    constraint GeoConstraint on text:
        value matches /\d{1,3}\.\d{1,}, \d{1,3}\.\d{1,}/;
    transform Coordinate {
        from Old oftype text;
        to New oftype decimal;
        New: Old / 100;
    }
    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['id'];
        outputColumn: 'id';
        use: Coordinate;
    }
    */

    // Sequence of Operations
    DataExtractor -> CsvFilePicker -> AirportsTextFileInterpreter -> AirportsCSVInterpreter
    -> WriteHeader -> WrriteHeaderBat -> AirportsTableInterpreter
    -> CelsiusToFahrenheitTransformerTemp -> CelsiusToFahrenheitTransformerBat -> DatabaseLoader;
}
